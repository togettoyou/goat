// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1beta1/book": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "Ëé∑Âèñ‰π¶Á±çÂàóË°®",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    }
                }
            }
        },
        "/api/v1beta1/example": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "example"
                ],
                "summary": "GetËØ∑Ê±Ç",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    }
                }
            }
        },
        "/api/v1beta1/example/err": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "example"
                ],
                "summary": "ErrËØ∑Ê±Ç",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    }
                }
            }
        },
        "/api/v1beta1/example/form": {
            "post": {
                "description": "Â§ÑÁêÜapplication/x-www-form-urlencodedÁ±ªÂûãÁöÑPOSTËØ∑Ê±Ç",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "example"
                ],
                "summary": "formË°®ÂçïËØ∑Ê±Ç",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ÈÇÆÁÆ±",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    }
                }
            }
        },
        "/api/v1beta1/example/json": {
            "post": {
                "description": "ÈÇÆÁÆ±„ÄÅÁî®Êà∑ÂêçÊ†°È™å",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "example"
                ],
                "summary": "JSONÂèÇÊï∞ËØ∑Ê±Ç",
                "parameters": [
                    {
                        "description": "ÊµãËØïËØ∑Ê±ÇjsonÂèÇÊï∞",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1beta1.JSONBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    }
                }
            }
        },
        "/api/v1beta1/example/query": {
            "get": {
                "description": "Êü•ËØ¢ÂèÇÊï∞ÔºåÂåπÈÖç query?id=xxx",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "example"
                ],
                "summary": "queryÂèÇÊï∞Êü•ËØ¢",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ÈÇÆÁÆ±",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    }
                }
            }
        },
        "/api/v1beta1/example/uri/{id}": {
            "get": {
                "description": "Ë∑ØÂæÑÂèÇÊï∞ÔºåÂåπÈÖç /uri/{id}",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "example"
                ],
                "summary": "uriÂèÇÊï∞ËØ∑Ê±Ç",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "idÂÄº",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "object"
                },
                "msg": {
                    "type": "string"
                }
            }
        },
        "v1beta1.JSONBody": {
            "type": "object",
            "required": [
                "email",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "admin@qq.com"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "goat",
	Description: "üêê Âü∫‰∫é gin + gorm ÁöÑËΩªÈáèÁ∫ßÂ∑•Á®ãÈ°πÁõÆ",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
